<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: openstack | Pedro Jiménez's Blog]]></title>
  <link href="http://pedrojimenez.github.com/blog/categories/openstack/atom.xml" rel="self"/>
  <link href="http://pedrojimenez.github.com/"/>
  <updated>2013-03-12T12:16:41+01:00</updated>
  <id>http://pedrojimenez.github.com/</id>
  <author>
    <name><![CDATA[Pedro Jiménez Solís]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[New Errors on Fresh Openstack Installations: MySQL and KeyStone]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/03/12/new-rrrors-on-fresh-openstack-installations-mysql-and-keystone/"/>
    <updated>2013-03-12T10:55:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/03/12/new-rrrors-on-fresh-openstack-installations-mysql-and-keystone</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="https://a248.e.akamai.net/camo.github.com/160d8ec179f975175efe17a3225dfd557772c1b2/687474703a2f2f7465726d2e69652f646174612f6d656469756d5f6b736c2e706e67">
</center>




<h2>Problemática con Keystone</h2>


<p>Al desplegar un nodo de Controller via Chef nos hemos encontrado con varios problemas. Para empezar, voy a datar la fecha del error. Ayer 11 de Marzo finalicé de actualizar todos los nodos a desplegar, renicié incluso las máquinas y me dispuse a seguir haciendo pruebas de despliegue con los cookbooks actualizados. Pero ... empezaron los errores. Por una parte, al hacer pruebas con Quantum necesitaba ver la lista de los tenants y al hacer un listado con "keystone" me dio un error de versionado.</p>

<pre>
$ keystone
Traceback (most recent call last):
  File "/usr/bin/keystone", line 5, in <module>
    from pkg_resources import load_entry_point
  File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 2807, in <module>
    parse_requirements(__requires__), Environment()
  File "/usr/lib/python2.7/dist-packages/pkg_resources.py", line 594, in resolve
    raise DistributionNotFound(req)
pkg_resources.DistributionNotFound: requests>=0.8.8,<1.0
</pre>




<!-- more -->


<p>Existe un error documentado al respecto, pero su solución es simple ==> pon la versión del repositorio de Grizzly, que funciona. <a href="https://bugs.launchpad.net/ubuntu/+source/python-keystoneclient/+bug/1122146">https://bugs.launchpad.net/ubuntu/+source/python-keystoneclient/+bug/1122146</a>
Bueno pues después de instalar la paquetería del repositorio del Grizzly, siguió sin funcionarme el <strong>Keystone</strong> así que tuve que buscar alternativas. Volví un paso atrás y quité la paquetería novedosa para volver a la del repositorio oficial de Folsom.</p>

<p>Se ha conseguido modificar al propio <code>Keystone</code> para que las dependencias que solicita, las resuelva a nuestro favor. Viendo el código de Keystone vemos que pide la versión 0.22 del paquete <strong>python-keystoneclient</strong> que no se encuentra actualmente en <strong>Folsom</strong>.</p>

<pre>
root@controller:~# dpkg -l | grep keystone
ii  keystone                         2012.2.1-0ubuntu1.2~cloud0                          OpenStack identity service - Daemons
ii  python-keystone                  2012.2.1-0ubuntu1.2~cloud0                          OpenStack identity service - Python library
ii  python-keystoneclient            1:0.1.3-0ubuntu1.1~cloud0                           Client libary for Openstack Keystone API
</pre>


<p>Así que cambiaremos el codigo del archivo <code>/usr/bin/keystone</code>:</p>

<pre>
#!/usr/bin/python
# EASY-INSTALL-ENTRY-SCRIPT: 'python-keystoneclient==0.1.3','console_scripts','keystone'
__requires__ = 'python-keystoneclient==0.2.2'
import sys
from pkg_resources import load_entry_point

if __name__ == '__main__':
    sys.exit(
        load_entry_point('python-keystoneclient==0.2.2', 'console_scripts', 'keystone')()
    )

por:

#!/usr/bin/python
# EASY-INSTALL-ENTRY-SCRIPT: 'python-keystoneclient==0.1.3','console_scripts','keystone'
__requires__ = 'python-keystoneclient==0.1.3'
import sys
from pkg_resources import load_entry_point

if __name__ == '__main__':
    sys.exit(
        load_entry_point('python-keystoneclient==0.1.3', 'console_scripts', 'keystone')()
    )
</pre>


<p>A partir de ese momento ya es posible utilizar <strong>keystone</strong> de manera habitual.</p>

<pre>
root@controller:~# keystone tenant-list
+----------------------------------+---------+---------+
|                id                |   name  | enabled |
+----------------------------------+---------+---------+
| 3ef73e7a7ec84f02bec118bfb5644d67 | service |   true  |
| 45d2324cb25b4b38bbda09dffb027662 |  admin  |   true  |
+----------------------------------+---------+---------+
</pre>




<center>
<img align=center
src="http://www.how2assist.com/wp-content/uploads/2010/10/mysql.png">
</center>




<h2>Problemática con MySQL</h2>


<p>Bien, el otro problema que nos hemos encontrado es que hemos actualizado los clientes de MySQL y de repente <strong>TODOS</strong> los servicios de la plataforma han comenzado a perder el acceso a la Base de Datos. En nuestra instalación se ha configurado a MySQL para que permita el acceso remoto al usuario <code>root</code> y al hacer las comprobaciones desde cada uno de los nodos externos al Controller (Network, Storage y Cómputos) ha comenzado a rechazar las conexiones.</p>

<p>Después de mucho investigar se ha tenido que realizar un <strong>RollBack</strong> hacia la versión anterior de MySQL, tanto del cliente como del Servidor en el nodo de controller. Para poder instalar una versión anterior hemos tenido que usar <strong>madison</strong> y seleccionar la anterior versión que teníamos en el nodo de Controller.</p>

<pre>
root@controller:/etc/apparmor.d# apt-cache madison mysql-server-5.5
mysql-server-5.5 | 5.5.29-0ubuntu0.12.04.2 | http://es.archive.ubuntu.com/ubuntu/ precise-updates/main amd64 Packages
mysql-server-5.5 | 5.5.29-0ubuntu0.12.04.1 | http://security.ubuntu.com/ubuntu/ precise-security/main amd64 Packages
mysql-server-5.5 | 5.5.22-0ubuntu1 | http://es.archive.ubuntu.com/ubuntu/ precise/main amd64 Packages
 mysql-5.5 | 5.5.22-0ubuntu1 | http://es.archive.ubuntu.com/ubuntu/ precise/main Sources
 mysql-5.5 | 5.5.29-0ubuntu0.12.04.2 | http://es.archive.ubuntu.com/ubuntu/ precise-updates/main Sources
 mysql-5.5 | 5.5.29-0ubuntu0.12.04.1 | http://security.ubuntu.com/ubuntu/ precise-security/main Sources
</pre>


<p>Ahora procedemos a la instalación de la paquetería con la versión que hemos seleccionado:</p>

<pre>
apt-get install --reinstall mysql-server-5.5=5.5.22-0ubuntu1 mysql-server-core-5.5=5.5.22-0ubuntu1 mysql-client-5.5=5.5.22-0ubuntu1 mysql-client-core-5.5=5.5.22-0ubuntu1 libmysqlclient18=5.5.22-0ubuntu1 mysql-common=5.5.22-0ubuntu1
</pre>




<h3>Error al generar el fichero de INITCTL de MySQL</h3>


<blockquote></blockquote>

<p>Cuando parecía que deberíamos tener ya acceso a levantar el servicio de Base de Datos, nos encontramos con el siguiente error al arrancar:</p>

<pre>
start: Job failed to start
</pre>


<p>Ha hecho falta copiar de manera manual el archivo <code>/etc/init/mysql.conf</code> para que el servicio pueda arrancar. Pego el contenido por si fuera de utilidad:</p>

<pre>
# MySQL Service

description     "MySQL Server"
author          "Mario Limonciello <superm1@ubuntu.com>"

start on (net-device-up
          and local-filesystems
      and runlevel [2345])
stop on runlevel [016]

respawn

env HOME=/etc/mysql
umask 007

pre-start script
    #Sanity checks
    [ -r $HOME/my.cnf ]
    [ -d /var/run/mysqld ] || install -m 755 -o mysql -g root -d /var/run/mysqld
    # Load AppArmor profile
    if aa-status --enabled 2>/dev/null; then
        apparmor_parser -r /etc/apparmor.d/usr.sbin.mysqld || true
    fi
    LC_ALL=C BLOCKSIZE= df --portability /var/lib/mysql/. | tail -n 1 | awk '{ exit ($4<4096) }'
end script

exec /usr/sbin/mysqld

post-start script
    for i in `seq 1 30` ; do
        /usr/bin/mysqladmin --defaults-file="${HOME}"/debian.cnf ping && {
            exec "${HOME}"/debian-start
            # should not reach this line
            exit 2
        }
        sleep 1
    done
    exit 1
end script
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Appendix: Chef-client log configuration after Bootstrap]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/02/06/appendix-chef-client-log-configuration-after-bootstrap/"/>
    <updated>2013-02-06T11:19:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/02/06/appendix-chef-client-log-configuration-after-bootstrap</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>


<br />




<h2>Chef: Logs después de realizar un BootStrap</h2>


<p>Ya hemos visto en post anteriores como realizar la instalación de OpenStack
bien con un servidor de [Chef Hosted] bien con un servidor [Chef Privado].
También se realizó un post sobre la instalación de un Servidor de Chef Privado
a través de una gema de Ruby
<a href="http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server/">knife-server</a>.</p>

<p>Bien, a la hora de depurar errores en cada ejecución del cliente de Chef la
salida está configurada por defecto para que lo haga en <strong>STDOUT</strong>. Sin embargo
en las instalaciones por paquetería de <strong>chef-client</strong> esta configuración se
sobreescribe con el valor que se especifique en <strong>/etc/default/chef-client</strong>,
que en nuestro caso será <strong>/var/log/chef/chef-client.log</strong>.</p>

<p>Valores por paquetería de /etc/chef/clint.rb</p>

<pre>
log_level          :info
log_location       STDOUT
</pre>


<p>Valores por paquetería de /etc/default/chef-client</p>

<pre>
LOGFILE=/var/log/chef/client.log
CONFIG=/etc/chef/client.rb
INTERVAL=1800
SPLAY=20
</pre>




<!-- more -->


<p>Más información sobre estas configuraciones en la página oficial de <a href="http://wiki.opscode.com/display/chef/Chef+Configuration+Settings">Opscode</a>.</p>

<p>Al realizar el despligue con <strong>SpiceWeasel</strong> la instalación del <strong>chef-client</strong>
se realiza con una gema y no por paquetería, por lo que no tendremos dicho
archivo en /etc/default.</p>

<p>Bastará con aplicar el valor que queramos para la ruta del fichero de log que
se desee y <strong>voilá</strong> volvemos a recibir los logs en cada una de las pasadas que
realice nuestro cliente contra el servidor de Chef que hayamos elegido.</p>

<p>Valores del fichero /etc/chef/client.rb</p>

<pre>
log_level        :info
log_location     "/var/log/chef/client.log"
chef_server_url  "http://192.168.1.64:4000"
validation_client_name "pjimenez-validator"
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack Installation - librarian and spiceweasel  Part II - Private Chef Server]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/01/31/openstack-installation-librarian-and-spiceweasel-part-ii-private-chef-server/"/>
    <updated>2013-01-31T11:02:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/01/31/openstack-installation-librarian-and-spiceweasel-part-ii-private-chef-server</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>


<br />


<h2>Eligiendo Servidor</h2>


<p>Como ya vimos en el post previo a este, hay una manera muy sencilla de instalar
un servidor de Chef mediante una Gema de Ruby, knife-server.</p>

<p>Ver: <a href="http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server">http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server</a></p>

<p>Nuestro objetivo real ahora mismo es realizar el despliegue de <strong>OpenStack</strong>, por
tanto cada cual deberá decidir cómo quiere instalarse el servidor propio de
Chef. Si es necesaria más información, se puede revisar la documentación
oficial de la gente de OpsCode.</p>

<p>Instalación: <a href="http://private-chef-docs.opscode.com/installation.html">http://private-chef-docs.opscode.com/installation.html</a></p>

<!-- more -->


<p>Continuamos entonces con el supuesto de tener ya nuestro Chef Server corriendo.
Ahora vamos a practicar magia, hagamos currar a nuestras herramientas.</p>

<h2>Librarian</h2>


<p>Por descontado que la parte de "librarian" es sencilla de manejar, tan solo
resta la decisión de qué cookbooks se quieren utilizar en nuestra
instalación. Los cookbooks genéricos se cogen de los recursos públicos de la comunidad de  OpsCode.</p>

<p>Cookbooks: <a href="http://community.opscode.com/cookbooks">http://community.opscode.com/cookbooks</a></p>

<blockquote><p>Desde aquí un agradecimiento especial a toda la gente que de manera pública o
privada contribuyen a tener un repositorio tan extenso de cookbooks.</p></blockquote>

<p>Sin embargo para la parte de los cookbooks de OpenStack hay mucha gente
contribuyendo a los públicos de OpsCode y/o desarrollando suyos propios.
Nuestro Chef Server y la infraestructura Cloud son tan flexible que nos da la
opción de elegir qué cookbooks queremos (o podéis hacer FORK de la parte de
GitHub y empezar vuestras aportaciones).</p>

<p>En nuestro caso utilizamos una mezcla entre la gente de RackSpace (rcbops), la
parte pública de OpsCode y otro subconjunto de cookbooks que hemos clonado y
usamos desde nuetro repositorio de Git (sea GitLAb o GitHub - Gracias @Sfrek).</p>

<p>Una vez instalada la gema ( ver post <a href="http://pedrojimenez.github.com/blog/2013/01/28/openstack-installation-librarian-and-spiceweasel-part-i-hosted-chef/">anterior</a> ) y con todos los cookbooks elegidos y cargados en nuestro <strong>Cheffile</strong> vamos a realizar la descarga de ellos dentro nuestro "openstack-chef-repo".</p>

<pre>
cd src
git clone ssh://git@code.abadasoft.com:22822/openstack_chef_repo.git

librarian-chef update
</pre>


<p>Si todo está correctamente configurado , nos generaría una salida como ésta:</p>

<pre>
pjimenez@pedro-pruebas:~/openstack-chef-repo$ librarian-chef update
Installing apache2 (1.2.0)
Installing apt (1.5.0)
Installing aws (0.100.2)
Installing build-essential (1.1.2)
Installing openssl (1.0.0)
Installing mysql (1.3.0)
Installing postgresql (1.0.0)
Installing xfs (1.0.0)
Installing database (1.3.6)
Installing yum (1.0.0)
Installing erlang (1.1.0)
Installing ntp (1.2.0)
Installing openssh (1.1.0)
Installing rabbitmq (1.6.4)
Installing rsyslog (1.5.0)
Installing selinux (0.5.2)
Installing sysctl (0.1.0)
Installing osops-utils (1.0.12)
Installing keepalived (1.0.2)
Installing rabbitmq-openstack (1.0.9)
Installing collectd (1.0.12)
Installing monit (1.0.12)
Installing monitoring (0.0.12)
Installing keystone (1.0.15)
Installing glance (1.0.15)
Installing horizon (1.0.12)
Installing mysql-openstack (1.0.10)
Installing cinder (0.0.6)
Installing dsh (0.0.14)
Installing nova (1.0.17)
Installing nova-network (1.0.16)
</pre>


<p><strong>Contenido del Cheffile</strong>:</p>

<pre>
#!/usr/bin/env ruby
#^syntax detection

site 'http://community.opscode.com/api/v1'

cookbook 'ntp', '1.2.0'
cookbook 'openssh', '1.1.0'
cookbook 'apt', '1.5.0'
cookbook 'yum', '1.0.0'
cookbook 'build-essential', '1.1.2'
cookbook 'erlang', '1.1.0'
cookbook 'openssl', '1.0.0'
cookbook 'postgresql', '1.0.0'
cookbook 'aws', '0.100.2'
cookbook 'xfs', '1.0.0'
cookbook 'database', '1.3.6'
cookbook 'mysql', '1.3.0'
cookbook 'rabbitmq', '1.6.4'
cookbook 'apache2', '1.2.0'
cookbook 'selinux', '0.5.2'
cookbook 'rsyslog'

cookbook 'sysctl',
  :git => 'https://github.com/mattray/sysctl.git'
cookbook 'keepalived',
  :git => 'https://github.com/rcbops-cookbooks/keepalived.git'
cookbook 'monit',
  :git => 'https://github.com/rcbops-cookbooks/monit.git'
cookbook 'monitoring',
  :git => 'https://github.com/rcbops-cookbooks/monitoring.git'
cookbook 'dsh',
  :git => 'https://github.com/rcbops-cookbooks/dsh.git'
cookbook 'osops-utils',
  :git => 'git://github.com/Abadasoft/osops-utils.git'
cookbook 'rabbitmq-openstack',
  :git => 'git://github.com/Abadasoft/rabbitmq-openstack.git'
cookbook 'collectd',
  :git => 'ssh://git@code.abadasoft.com:22822/pjimenez/collectd.git',
  :ref => 'testing'
cookbook 'mysql-openstack',
  :git => 'https://github.com/Abadasoft/mysql-openstack.git'
cookbook 'keystone',
  :git => 'https://github.com/Abadasoft/keystone.git'
cookbook 'glance',
  :git => 'https://github.com/Abadasoft/glance.git'
cookbook 'nova',
  :git => 'ssh://git@code.abadasoft.com:22822/nova.git',
  :ref => 'testing'
cookbook 'horizon',
  :git => 'https://github.com/Abadasoft/horizon.git'
cookbook 'nova-network',
  :git => 'https://github.com/Abadasoft/nova-network.git'
cookbook 'cinder',
  :git => 'ssh://git@code.abadasoft.com:22822/cinder.git'
</pre>




<h2>SpiceWeasel</h2>


<p>Bien, repasemos nuestro estado. Tenemos un "openstack-chef-repo" clonado desde
GiT, hemos rellenado el fichero de librarian (Cheffile) con los cookbooks
elegidos, hemos ejecutado librarian y se handescargado dentro del directorio
"cookbooks" todas las recetas elegidas.</p>

<p>Ahora vamos a comenzar el despliegue, lo primero que necesitamos al igual que
en el paso del Servidor Hosted de Chef es configurar los parámetros de conexión
contra el servidor de Chef elegido. Al ser un servidor privado los parámetros
deben cambiar (ver archivo config.rb con las instrucciones).</p>

<p>En nuestro servidor de Chef ahora mismo está como cliente (y Admin) el usuario
<strong>pjimenez</strong>, ahora necesitamos crear otro nuevo: <strong>pjimenez-validator</strong> y darle
permisos de admin. Copiamos la clave privada que se genere a un fichero .pem
dentro del directorio:</p>

<pre>
openstack-chef-repo
|
\ _ validation.pem (clave del servidor de chef).
\ _ pjimenez-validator.pem (clave de usuario creada).
</pre>


<p>Seguimos los pasos del fichero de configuración y rellenamos con los valores
necesarios (file: config.rb)</p>

<pre>
# Setup steps with own chef server:
# 1. Change chef server URL
# 2. Create a chef client with <somename>-validator
# 3. Put <somename>-validator.pem in this directory
# 4. change "chef_organization" to <somename>
self.chef_organization = "pjimenez"
self.chef_url = "http://192.168.1.64:4000"
</pre>


<p>En nuestro ejemplo se ha creado un entorno de pruebas <strong>folsom-pre</strong> y se ha
generado su archivo <strong>folsom-pre.rb</strong> dentro del directorio environments.</p>

<p>Los roles que se van a utilizar son los que están publicados en el repositorio
oficial de Opscode: <a href="https://github.com/opscode/openstack-chef-repo">https://github.com/opscode/openstack-chef-repo</a>.</p>

<p>Nos falta rellenar el archivo principal de Spiceweasel: <strong>infraestructure.yml</strong></p>

<pre>
cookbooks:
- ntp: #used by base role
- openssh: #used by base role
- apt: #used by erlang
- yum: #used by erlang
- build-essential: # used by mysql
- rsyslog:
- erlang: #used by rabbitmq-server role
- rabbitmq: #used by rabbitmq-server role
- openssl: #used by mysql
- mysql: #used by mysql-master role
- postgresql: #required by database
- aws: #required by database
- xfs: #required by database
- database: #required by keystone
- monitoring: #used by horizon-server role
- apache2: #required by horizon
- selinux: #required by nova
- sysctl: #required by nova
- osops-utils: #required by keystone
- mysql-openstack: #required by keystone
- rabbitmq-openstack: #required by keystone
- cinder: #used by horizon-server role
- keystone: #used by keystone role
- glance: #used by glance roles
- nova: #used by nova roles
- nova-network: #used by nova roles
- horizon: #used by horizon-server role
- keepalived: #used by horizon-server role
- dsh: #used by horizon-server role
- monit: #used by horizon-server role
- collectd: #used by horizon-server role

environments:
- folsom_pre:

data bags:

roles:
  - base:
  - mysql-master:
  - rabbitmq-server:
  - keystone:
  - glance-api:
  - glance-registry:
  - glance:
  - nova-setup:
  - nova-scheduler:
  - nova-api-ec2:
  - nova-api-os-compute:
  - nova-volume:
  - nova-vncproxy:
  - horizon-server:
  - single-controller:
  - single-compute:
  - allinone:
nodes:
- folsom-aio:
  run_list: role[base] role[allinone]
  options: -x root -P onetimepassword -E folsom_pre
</pre>


<p>Por fin ... nos acercamos al momento estrella ... Vamos a desplegar un entorno
completo con una máquina que hará de AllinOne:</p>

<pre>
spiceweasel infraestructure.yml | sh
</pre>


<blockquote><p>NOTAS:
La máquina que hará de allinone (folsom-aio) está resuelta en /etc/hosts.
Esta máquina sólo tiene instalado el Sistema Operativo y configurada la red.</p></blockquote>

<p>En unos minutos podréis acceder a la instalación completa de Openstack a través
del navegador: <a href="http://&lt;folsom-aio-ip">http://&lt;folsom-aio-ip</a>></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing a Private Chef Server via knife-server]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server/"/>
    <updated>2013-01-29T09:45:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>


<p>Existen varias maneras de instalar un servidor de Chef privado, bien sea en una
máquina virtual o física. Vamos a abordar una de ellas, la instalación del
servidor de Chef via la gema de "knife-server".</p>

<p>Más información sobre instalaciones manuales de CHEF:
<a href="http://wiki.opscode.com/display/chef/Installing+Chef+Server+Manually">http://wiki.opscode.com/display/chef/Installing+Chef+Server+Manually</a></p>

<p>Será necesario tener un entorno RVM operativo y funcional. Para más información
se puede ampliar desde aquí: <a href="https://rvm.io/rvm/install/">https://rvm.io/rvm/install/</a>. La verdad que no es
el objetivo de este post explicar la instalación de dicho entorno.</p>

<!-- more -->


<p>Una vez realizado el <em>login</em> con el usuario del entorno RVM, pasaremos a la
instalación de la Gema. En un primer paso nos ha dado un error y nos ha
informado que:</p>

<pre>
pjimenez@pedro-pruebas:~$ gem install knife-server
Fetching: builder-3.1.4.gem (100%)
Fetching: excon-0.16.10.gem (100%)
Fetching: formatador-0.2.4.gem (100%)
Fetching: multi_json-1.5.0.gem (100%)
Fetching: net-scp-1.0.4.gem (100%)
Fetching: nokogiri-1.5.6.gem (100%)
Building native extensions.  This could take a while...
ERROR:  Error installing knife-server:
        ERROR: Failed to build gem native extension.

            /home/pjimenez/.rvm/rubies/ruby-1.9.3-p374/bin/ruby extconf.rb
            checking for libxml/parser.h... no
            -----
            libxml2 is missing.  please visit
            http://nokogiri.org/tutorials/installing_nokogiri.html for help
            with installing dependencies.
            -----
            *** extconf.rb failed ***
</pre>


<p>Siguiendo las instrucciones que nos aparecen en el enlace suministrado en el
log, se instalan los paquetes que faltan.</p>

<pre>
$ sudo apt-get install libxslt-dev libxml2-dev
</pre>


<p>Repetimos después la parte de la Gema.</p>

<pre>
pjimenez@pedro-pruebas:~$ gem install knife-server
Building native extensions.  This could take a while...
Fetching: ruby-hmac-0.4.0.gem (100%)
Fetching: fog-1.9.0.gem (100%)
Fetching: knife-ec2-0.6.2.gem (100%)
Fetching: knife-server-0.3.3.gem (100%)
Successfully installed nokogiri-1.5.6
Successfully installed ruby-hmac-0.4.0
Successfully installed fog-1.9.0
Successfully installed knife-ec2-0.6.2
Successfully installed knife-server-0.3.3
5 gems installed
Installing ri documentation for nokogiri-1.5.6...
Installing ri documentation for ruby-hmac-0.4.0...
Installing ri documentation for fog-1.9.0...
Installing ri documentation for knife-ec2-0.6.2...
Installing ri documentation for knife-server-0.3.3...
Installing RDoc documentation for nokogiri-1.5.6...
Installing RDoc documentation for ruby-hmac-0.4.0...
Installing RDoc documentation for fog-1.9.0...
Installing RDoc documentation for knife-ec2-0.6.2...
Installing RDoc documentation for knife-server-0.3.3...
</pre>


<p>Bien, primer reto conseguido. Ahora la parte mágica del asunto ... la
instalación desatendida del servidor de Chef.</p>

<pre>
pjimenez@pedro-pruebas:~$ knife server bootstrap standalone --ssh-user root
--node-name chefpedro --host 192.168.1.64

WARNING: No knife configuration file found
WARNING: Failed to authenticate root - trying password auth
Enter password for root@192.168.1.64: 
Bootstrapping Chef on 192.168.1.64
...
</pre>


<p>Vemos que se ha generado el certificado de Servidor (validation.pem) así como
todos los archivos de configuración. Los clientes hay que crearlos aún.</p>

<pre>
root@chefpedro:/etc/chef# ll
total 48
drwxr-xr-x  4 chef chef 4096 ene 29 11:26 ./
drwxr-xr-x 99 root root 4096 ene 29 11:26 ../
drwx------  2 chef root 4096 ene 29 11:26 certificates/
-rw-r-----  1 chef chef 3002 ene 29 11:25 client.rb
-rw-r-----  1 chef chef 6296 ene 29 11:25 server.rb
drwxr-xr-x  2 chef chef 4096 ene 29 11:25 solr-jetty/
-rw-r-----  1 chef chef 2627 ene 29 11:25 solr.rb
-rw-------  1 chef chef 1679 ene 29 11:25 validation.pem
-rw-------  1 chef chef 1679 ene 29 11:25 webui.pem
-rw-r-----  1 chef chef 4470 ene 29 11:26 webui.rb
</pre>


<p>Vemos las versiones de paquetería utilizadas actualmente.</p>

<pre>
root@chefpedro:/etc/chef# dpkg -l | grep chef
ii  chef                                10.18.2-2                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-expander                       10.18.2-1                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-server                         10.18.2-1                        A
meta-gem to install all server components of the Chef configuration management
system

ii  chef-server-api                     10.18.2-1                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-server-webui                   10.18.2-1                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-solr                           10.18.2-1
Manages search indexes of Chef node attributes using SOLR
</pre>


<p>Ahora toca cacharrear con nuestro servidor ... al navegador: <a href="http://chefpedro:4040">http://chefpedro:4040</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack Installation - librarian and spiceweasel  Part I - Hosted Chef]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/01/28/openstack-installation-librarian-and-spiceweasel-part-i-hosted-chef/"/>
    <updated>2013-01-28T12:58:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/01/28/openstack-installation-librarian-and-spiceweasel-part-i-hosted-chef</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>




<h2>¿ Quiénes son ?</h2>


<p>Hemos de detenernos un instante para hacer meción especial a las 2 maravillosas
gemas que nos harán la vida muy sencilla con OpenStack. Hablamos de "librarian"
y de "spiceweasel". Para que la presentación sea bastante más oficial debemos
considerar que librarian será nuestro "cazador de cookbooks" y que spiceweasel
será el que los aplique contra el Servidor de Chef que elijamos, bien sea
público o privado. Además SpiceWeasel se encargará de aplicar roles/cookbooks a
los nodos directamente. Con esta pequeña "joya" se pueden hacer despliegues
verdaderamente veloces.</p>

<p><strong>Librarian</strong></p>

<p>Librarian-Chef is a bundler for infrastructure repositories using Chef. You can
use Librarian-Chef to resolve your infrastructure's cookbook dependencies,
fetch them, and install them into your infrastructure repository.</p>

<p>Enlace: <a href="https://github.com/applicationsonline/librarian">https://github.com/applicationsonline/librarian</a></p>

<p><strong>SpiceWeasel</strong></p>

<p>Provides a CLI tool for generating knife commands to build Chef-managed
infrastructure from a simple JSON or YAML file.</p>

<p>Enlace: <a href="http://wiki.opscode.com/display/chef/Spiceweasel">http://wiki.opscode.com/display/chef/Spiceweasel</a></p>

<!-- more -->




<h2>Instalación</h2>


<p>Así pues para poder automatizar tareas de instalación los utilizaremos a ambos.
En la mayoría de los casos, la diferentes empresas como la nuestra, querrán
poder realizar modificaciones a los "cookbooks" o al menos seleccionar la
fuente desde la que descargarlos/utilizarlos.</p>

<h3>Librarian</h3>


<p>Necesitamos instalarlo como gema:</p>

<pre>
gem install librarian
</pre>


<p>Ahora entra en acción Librarian-Chef y su combinación con la estructura del
chef-repo oficial de OpsCode. Como primer paso necesitamos descargar dicho
repositorio desde GiT.</p>

<pre>
git clone https://www.github.com/cloudbau/openstack-chef-repo.git
</pre>


<p>En su contenido podremos especificarle desde dónde queremos descargar los
cookbooks que se van a procesar dentro de nuestro "chef-repo".</p>

<pre>
PODEMOS VER COOKBOOKS DE LA COMUNIDAD:
site 'http://community.opscode.com/api/v1'
cookbook 'ntp', '1.2.0'
cookbook 'openssh', '1.1.0'
...

O ESPECIFICARLOS MANUALMENTE:
cookbook 'osops-utils',
  :git => 'https://github.com/cloudbau/chef-osops-utils.git'

cookbook 'rabbitmq-openstack',
  :git => 'https://github.com/mattray/rabbitmq-openstack.git'
</pre>


<p>Con la lista completa de los cookbooks que necesitamos para un despligue cloud,
"librarian" se encarga de descargarlos dentro de la estructura de nuestro repo.</p>

<pre>
operador@pedro-pruebas:~/openstack-chef-repo$ librarian-chef update
Installing apache2 (1.2.0)
Installing apt (1.5.0)
Installing aws (0.100.2)
Installing build-essential (1.1.2)
Installing openssl (1.0.0)
Installing mysql (1.3.0)
Installing postgresql (1.0.0)
Installing xfs (1.0.0)
Installing database (1.3.6)
Installing yum (1.0.0)
Installing erlang (1.1.0)
Installing ntp (1.2.0)
Installing openssh (1.1.0)
Installing rabbitmq (1.6.4)
Installing selinux (0.5.2)
Installing osops-utils (1.0.6)
Installing keystone (5.0.0)
Installing glance (5.0.0)
Installing horizon (5.0.0)
Installing sysctl (0.1.0)
Installing nova (5.0.0)
Installing mysql-openstack (1.0.4)
Installing rabbitmq-openstack (1.0.4)
</pre>




<h3>SpiceWeasel</h3>


<p>Se ha elegido en este primer post utiilzar el server hosted de Chef, aunque es
cierto que la próxima vez utilizaremos un chef-server propio. Para aquellos que
no tengan cuenta:
<a href="http://www.opscode.com/">http://www.opscode.com/</a></p>

<p>Una vez dentro hay que descargarse la clave privada del usuario elegido
(user.pem), y también la clave la organización (organizaction.pem) que se usarán para realizar la subida contra nuestro repo privado de Chef en OpsCode.</p>

<p>Hay que tener la gema instalada de nuevo:</p>

<pre>
gem install spiceweasel
</pre>


<p>Hay que modificar las opciones del servidor de Chef en el archivo "config.rb".
Con los valores correctos de usuario / organización y teniendo las claves en el
mismo directorio raiz del "chef-repo" procedemos a subirlos.</p>

<pre><code class='bash'>
pjimenez@pedro-pruebas:~/openstack-chef-repo$ spiceweasel infrastructure.yml | sh

Uploading ntp          [1.2.0]
Uploaded 1 cookbook.
Uploading openssh        [1.1.0]
Uploaded 1 cookbook.
Uploading apt            [1.5.0]
Uploaded 1 cookbook.
Uploading yum            [1.0.0]
Uploaded 1 cookbook.
Uploading build-essential [1.1.2]
Uploaded 1 cookbook.
Uploading erlang         [1.1.0]
Uploaded 1 cookbook.
Uploading rabbitmq       [1.6.4]
Uploaded 1 cookbook.
Uploading openssl        [1.0.0]
Uploaded 1 cookbook.
Uploading mysql          [1.3.0]
Uploaded 1 cookbook.
Uploading postgresql     [1.0.0]
Uploaded 1 cookbook.
Uploading aws            [0.100.2]
Uploaded 1 cookbook.
Uploading xfs            [1.0.0]
Uploaded 1 cookbook.
Uploading database       [1.3.6]
Uploaded 1 cookbook.
Uploading apache2        [1.2.0]
Uploaded 1 cookbook.
Uploading selinux        [0.5.2]
Uploaded 1 cookbook.
Uploading sysctl         [0.1.2]
Uploaded 1 cookbook.
Uploading osops-utils    [1.0.6]
Uploaded 1 cookbook.
Uploading mysql-openstack [1.0.4]
Uploaded 1 cookbook.
Uploading rabbitmq-openstack [1.0.4]
Uploaded 1 cookbook.
Uploading keystone       [5.0.0]
Uploaded 1 cookbook.
Uploading glance         [5.0.0]
Uploaded 1 cookbook.
Uploading nova           [5.0.0]
Uploaded 1 cookbook.
Uploading horizon        [5.0.0]
Uploaded 1 cookbook.
Updated Environment production
Updated Role base!
Updated Role mysql-master!
Updated Role rabbitmq-server!
Updated Role keystone!
Updated Role glance-api!
Updated Role glance-registry!
Updated Role glance!
Updated Role nova-setup!
Updated Role nova-scheduler!
Updated Role nova-api-ec2!
Updated Role nova-api-os-compute!
Updated Role nova-volume!
Updated Role nova-vncproxy!
Updated Role horizon-server!
Updated Role single-controller!
Updated Role single-compute!
Updated Role allinone!
</code></pre>


<p>Si visitamos ahora la parte de "CookBooks" desde nuestra cuenta podremos ver la
lista de todos ellos, accesibles ahora de manera pública en OpsCode Hosted
Chef.</p>

<blockquote><p>NOTA: nos queda pendiente aplicar además la parte de NODOS, aunque eso será
para el próximo post, cuando además se haga con un servidor de Chef propio.</p>

<p>NOTA2: Con la versión nueva de la gema de Spiceweasel hay una modficación, en el
archivo de "infrastructure.yml", en la parte de los Cookbooks hay un cambio en
la sintaxis:</p></blockquote>

<pre>
 ANTES:
 - ntp: #used by base role
  - 1.2.0

 DESPUÉS:
 - ntp: #used by base role
  version: 1.2.0
</pre>

]]></content>
  </entry>
  
</feed>
