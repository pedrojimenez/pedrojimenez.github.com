<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Pedro Jiménez's Blog]]></title>
  <link href="http://pedrojimenez.github.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://pedrojimenez.github.com/"/>
  <updated>2013-02-05T10:56:39+01:00</updated>
  <id>http://pedrojimenez.github.com/</id>
  <author>
    <name><![CDATA[Pedro Jiménez Solís]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openstack Installation - librarian and spiceweasel  Part II - Private Chef Server]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/01/31/openstack-installation-librarian-and-spiceweasel-part-ii-private-chef-server/"/>
    <updated>2013-01-31T11:02:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/01/31/openstack-installation-librarian-and-spiceweasel-part-ii-private-chef-server</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>


<br />


<h2>Eligiendo Servidor</h2>


<p>Como ya vimos en el post previo a este, hay una manera muy sencilla de instalar
un servidor de Chef mediante una Gema de Ruby, knife-server.</p>

<p>Ver: <a href="http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server">http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server</a></p>

<p>Nuestro objetivo real ahora mismo es realizar el despliegue de <strong>OpenStack</strong>, por
tanto cada cual deberá decidir cómo quiere instalarse el servidor propio de
Chef. Si es necesaria más información, se puede revisar la documentación
oficial de la gente de OpsCode.</p>

<p>Instalación: <a href="http://private-chef-docs.opscode.com/installation.html">http://private-chef-docs.opscode.com/installation.html</a></p>

<!-- more -->


<p>Continuamos entonces con el supuesto de tener ya nuestro Chef Server corriendo.
Ahora vamos a practicar magia, hagamos currar a nuestras herramientas.</p>

<h2>Librarian</h2>


<p>Por descontado que la parte de "librarian" es sencilla de manejar, tan solo
resta la decisión de qué cookbooks se quieren utilizar en nuestra
instalación. Los cookbooks genéricos se cogen de los recursos públicos de la comunidad de  OpsCode.</p>

<p>Cookbooks: <a href="http://community.opscode.com/cookbooks">http://community.opscode.com/cookbooks</a></p>

<blockquote><p>Desde aquí un agradecimiento especial a toda la gente que de manera pública o
privada contribuyen a tener un repositorio tan extenso de cookbooks.</p></blockquote>

<p>Sin embargo para la parte de los cookbooks de OpenStack hay mucha gente
contribuyendo a los públicos de OpsCode y/o desarrollando suyos propios.
Nuestro Chef Server y la infraestructura Cloud son tan flexible que nos da la
opción de elegir qué cookbooks queremos (o podéis hacer FORK de la parte de
GitHub y empezar vuestras aportaciones).</p>

<p>En nuestro caso utilizamos una mezcla entre la gente de RackSpace (rcbops), la
parte pública de OpsCode y otro subconjunto de cookbooks que hemos clonado y
usamos desde nuetro repositorio de Git (sea GitLAb o GitHub - Gracias @Sfrek).</p>

<p>Una vez instalada la gema ( ver post <a href="http://pedrojimenez.github.com/blog/2013/01/28/openstack-installation-librarian-and-spiceweasel-part-i-hosted-chef/">anterior</a> ) y con todos los cookbooks elegidos y cargados en nuestro <strong>Cheffile</strong> vamos a realizar la descarga de ellos dentro nuestro "openstack-chef-repo".</p>

<pre>
cd src
git clone ssh://git@code.abadasoft.com:22822/openstack_chef_repo.git

librarian-chef update
</pre>


<p>Si todo está correctamente configurado , nos generaría una salida como ésta:</p>

<pre>
pjimenez@pedro-pruebas:~/openstack-chef-repo$ librarian-chef update
Installing apache2 (1.2.0)
Installing apt (1.5.0)
Installing aws (0.100.2)
Installing build-essential (1.1.2)
Installing openssl (1.0.0)
Installing mysql (1.3.0)
Installing postgresql (1.0.0)
Installing xfs (1.0.0)
Installing database (1.3.6)
Installing yum (1.0.0)
Installing erlang (1.1.0)
Installing ntp (1.2.0)
Installing openssh (1.1.0)
Installing rabbitmq (1.6.4)
Installing rsyslog (1.5.0)
Installing selinux (0.5.2)
Installing sysctl (0.1.0)
Installing osops-utils (1.0.12)
Installing keepalived (1.0.2)
Installing rabbitmq-openstack (1.0.9)
Installing collectd (1.0.12)
Installing monit (1.0.12)
Installing monitoring (0.0.12)
Installing keystone (1.0.15)
Installing glance (1.0.15)
Installing horizon (1.0.12)
Installing mysql-openstack (1.0.10)
Installing cinder (0.0.6)
Installing dsh (0.0.14)
Installing nova (1.0.17)
Installing nova-network (1.0.16)
</pre>


<p><strong>Contenido del Cheffile</strong>:</p>

<pre>
#!/usr/bin/env ruby
#^syntax detection

site 'http://community.opscode.com/api/v1'

cookbook 'ntp', '1.2.0'
cookbook 'openssh', '1.1.0'
cookbook 'apt', '1.5.0'
cookbook 'yum', '1.0.0'
cookbook 'build-essential', '1.1.2'
cookbook 'erlang', '1.1.0'
cookbook 'openssl', '1.0.0'
cookbook 'postgresql', '1.0.0'
cookbook 'aws', '0.100.2'
cookbook 'xfs', '1.0.0'
cookbook 'database', '1.3.6'
cookbook 'mysql', '1.3.0'
cookbook 'rabbitmq', '1.6.4'
cookbook 'apache2', '1.2.0'
cookbook 'selinux', '0.5.2'
cookbook 'rsyslog'

cookbook 'sysctl',
  :git => 'https://github.com/mattray/sysctl.git'
cookbook 'keepalived',
  :git => 'https://github.com/rcbops-cookbooks/keepalived.git'
cookbook 'monit',
  :git => 'https://github.com/rcbops-cookbooks/monit.git'
cookbook 'monitoring',
  :git => 'https://github.com/rcbops-cookbooks/monitoring.git'
cookbook 'dsh',
  :git => 'https://github.com/rcbops-cookbooks/dsh.git'
cookbook 'osops-utils',
  :git => 'git://github.com/Abadasoft/osops-utils.git'
cookbook 'rabbitmq-openstack',
  :git => 'git://github.com/Abadasoft/rabbitmq-openstack.git'
cookbook 'collectd',
  :git => 'ssh://git@code.abadasoft.com:22822/pjimenez/collectd.git',
  :ref => 'testing'
cookbook 'mysql-openstack',
  :git => 'https://github.com/Abadasoft/mysql-openstack.git'
cookbook 'keystone',
  :git => 'https://github.com/Abadasoft/keystone.git'
cookbook 'glance',
  :git => 'https://github.com/Abadasoft/glance.git'
cookbook 'nova',
  :git => 'ssh://git@code.abadasoft.com:22822/nova.git',
  :ref => 'testing'
cookbook 'horizon',
  :git => 'https://github.com/Abadasoft/horizon.git'
cookbook 'nova-network',
  :git => 'https://github.com/Abadasoft/nova-network.git'
cookbook 'cinder',
  :git => 'ssh://git@code.abadasoft.com:22822/cinder.git'
</pre>




<h2>SpiceWeasel</h2>


<p>Bien, repasemos nuestro estado. Tenemos un "openstack-chef-repo" clonado desde
GiT, hemos rellenado el fichero de librarian (Cheffile) con los cookbooks
elegidos, hemos ejecutado librarian y se handescargado dentro del directorio
"cookbooks" todas las recetas elegidas.</p>

<p>Ahora vamos a comenzar el despliegue, lo primero que necesitamos al igual que
en el paso del Servidor Hosted de Chef es configurar los parámetros de conexión
contra el servidor de Chef elegido. Al ser un servidor privado los parámetros
deben cambiar (ver archivo config.rb con las instrucciones).</p>

<p>En nuestro servidor de Chef ahora mismo está como cliente (y Admin) el usuario
<strong>pjimenez</strong>, ahora necesitamos crear otro nuevo: <strong>pjimenez-validator</strong> y darle
permisos de admin. Copiamos la clave privada que se genere a un fichero .pem
dentro del directorio:</p>

<pre>
openstack-chef-repo
|
\ _ validation.pem (clave del servidor de chef).
\ _ pjimenez-validator.pem (clave de usuario creada).
</pre>


<p>Seguimos los pasos del fichero de configuración y rellenamos con los valores
necesarios (file: config.rb)</p>

<pre>
# Setup steps with own chef server:
# 1. Change chef server URL
# 2. Create a chef client with <somename>-validator
# 3. Put <somename>-validator.pem in this directory
# 4. change "chef_organization" to <somename>
self.chef_organization = "pjimenez"
self.chef_url = "http://192.168.1.64:4000"
</pre>


<p>En nuestro ejemplo se ha creado un entorno de pruebas <strong>folsom-pre</strong> y se ha
generado su archivo <strong>folsom-pre.rb</strong> dentro del directorio environments.</p>

<p>Los roles que se van a utilizar son los que están publicados en el repositorio
oficial de Opscode: <a href="https://github.com/opscode/openstack-chef-repo">https://github.com/opscode/openstack-chef-repo</a>.</p>

<p>Nos falta rellenar el archivo principal de Spiceweasel: <strong>infraestructure.yml</strong></p>

<pre>
cookbooks:
- ntp: #used by base role
- openssh: #used by base role
- apt: #used by erlang
- yum: #used by erlang
- build-essential: # used by mysql
- rsyslog:
- erlang: #used by rabbitmq-server role
- rabbitmq: #used by rabbitmq-server role
- openssl: #used by mysql
- mysql: #used by mysql-master role
- postgresql: #required by database
- aws: #required by database
- xfs: #required by database
- database: #required by keystone
- monitoring: #used by horizon-server role
- apache2: #required by horizon
- selinux: #required by nova
- sysctl: #required by nova
- osops-utils: #required by keystone
- mysql-openstack: #required by keystone
- rabbitmq-openstack: #required by keystone
- cinder: #used by horizon-server role
- keystone: #used by keystone role
- glance: #used by glance roles
- nova: #used by nova roles
- nova-network: #used by nova roles
- horizon: #used by horizon-server role
- keepalived: #used by horizon-server role
- dsh: #used by horizon-server role
- monit: #used by horizon-server role
- collectd: #used by horizon-server role

environments:
- folsom_pre:

data bags:

roles:
  - base:
  - mysql-master:
  - rabbitmq-server:
  - keystone:
  - glance-api:
  - glance-registry:
  - glance:
  - nova-setup:
  - nova-scheduler:
  - nova-api-ec2:
  - nova-api-os-compute:
  - nova-volume:
  - nova-vncproxy:
  - horizon-server:
  - single-controller:
  - single-compute:
  - allinone:
nodes:
- folsom-aio:
  run_list: role[base] role[allinone]
  options: -x root -P onetimepassword -E folsom_pre
</pre>


<p>Por fin ... nos acercamos al momento estrella ... Vamos a desplegar un entorno
completo con una máquina que hará de AllinOne:</p>

<pre>
spiceweasel infraestructure.yml | sh
</pre>


<blockquote><p>NOTAS:
La máquina que hará de allinone (folsom-aio) está resuelta en /etc/hosts.
Esta máquina sólo tiene instalado el Sistema Operativo y configurada la red.</p></blockquote>

<p>En unos minutos podréis acceder a la instalación completa de Openstack a través
del navegador: <a href="http://&lt;folsom-aio-ip">http://&lt;folsom-aio-ip</a>></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing a Private Chef Server via knife-server]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server/"/>
    <updated>2013-01-29T09:45:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/01/29/installing-a-private-chef-server-via-knife-server</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>


<p>Existen varias maneras de instalar un servidor de Chef privado, bien sea en una
máquina virtual o física. Vamos a abordar una de ellas, la instalación del
servidor de Chef via la gema de "knife-server".</p>

<p>Más información sobre instalaciones manuales de CHEF:
<a href="http://wiki.opscode.com/display/chef/Installing+Chef+Server+Manually">http://wiki.opscode.com/display/chef/Installing+Chef+Server+Manually</a></p>

<p>Será necesario tener un entorno RVM operativo y funcional. Para más información
se puede ampliar desde aquí: <a href="https://rvm.io/rvm/install/">https://rvm.io/rvm/install/</a>. La verdad que no es
el objetivo de este post explicar la instalación de dicho entorno.</p>

<!-- more -->


<p>Una vez realizado el <em>login</em> con el usuario del entorno RVM, pasaremos a la
instalación de la Gema. En un primer paso nos ha dado un error y nos ha
informado que:</p>

<pre>
pjimenez@pedro-pruebas:~$ gem install knife-server
Fetching: builder-3.1.4.gem (100%)
Fetching: excon-0.16.10.gem (100%)
Fetching: formatador-0.2.4.gem (100%)
Fetching: multi_json-1.5.0.gem (100%)
Fetching: net-scp-1.0.4.gem (100%)
Fetching: nokogiri-1.5.6.gem (100%)
Building native extensions.  This could take a while...
ERROR:  Error installing knife-server:
        ERROR: Failed to build gem native extension.

            /home/pjimenez/.rvm/rubies/ruby-1.9.3-p374/bin/ruby extconf.rb
            checking for libxml/parser.h... no
            -----
            libxml2 is missing.  please visit
            http://nokogiri.org/tutorials/installing_nokogiri.html for help
            with installing dependencies.
            -----
            *** extconf.rb failed ***
</pre>


<p>Siguiendo las instrucciones que nos aparecen en el enlace suministrado en el
log, se instalan los paquetes que faltan.</p>

<pre>
$ sudo apt-get install libxslt-dev libxml2-dev
</pre>


<p>Repetimos después la parte de la Gema.</p>

<pre>
pjimenez@pedro-pruebas:~$ gem install knife-server
Building native extensions.  This could take a while...
Fetching: ruby-hmac-0.4.0.gem (100%)
Fetching: fog-1.9.0.gem (100%)
Fetching: knife-ec2-0.6.2.gem (100%)
Fetching: knife-server-0.3.3.gem (100%)
Successfully installed nokogiri-1.5.6
Successfully installed ruby-hmac-0.4.0
Successfully installed fog-1.9.0
Successfully installed knife-ec2-0.6.2
Successfully installed knife-server-0.3.3
5 gems installed
Installing ri documentation for nokogiri-1.5.6...
Installing ri documentation for ruby-hmac-0.4.0...
Installing ri documentation for fog-1.9.0...
Installing ri documentation for knife-ec2-0.6.2...
Installing ri documentation for knife-server-0.3.3...
Installing RDoc documentation for nokogiri-1.5.6...
Installing RDoc documentation for ruby-hmac-0.4.0...
Installing RDoc documentation for fog-1.9.0...
Installing RDoc documentation for knife-ec2-0.6.2...
Installing RDoc documentation for knife-server-0.3.3...
</pre>


<p>Bien, primer reto conseguido. Ahora la parte mágica del asunto ... la
instalación desatendida del servidor de Chef.</p>

<pre>
pjimenez@pedro-pruebas:~$ knife server bootstrap standalone --ssh-user root
--node-name chefpedro --host 192.168.1.64

WARNING: No knife configuration file found
WARNING: Failed to authenticate root - trying password auth
Enter password for root@192.168.1.64: 
Bootstrapping Chef on 192.168.1.64
...
</pre>


<p>Vemos que se ha generado el certificado de Servidor (validation.pem) así como
todos los archivos de configuración. Los clientes hay que crearlos aún.</p>

<pre>
root@chefpedro:/etc/chef# ll
total 48
drwxr-xr-x  4 chef chef 4096 ene 29 11:26 ./
drwxr-xr-x 99 root root 4096 ene 29 11:26 ../
drwx------  2 chef root 4096 ene 29 11:26 certificates/
-rw-r-----  1 chef chef 3002 ene 29 11:25 client.rb
-rw-r-----  1 chef chef 6296 ene 29 11:25 server.rb
drwxr-xr-x  2 chef chef 4096 ene 29 11:25 solr-jetty/
-rw-r-----  1 chef chef 2627 ene 29 11:25 solr.rb
-rw-------  1 chef chef 1679 ene 29 11:25 validation.pem
-rw-------  1 chef chef 1679 ene 29 11:25 webui.pem
-rw-r-----  1 chef chef 4470 ene 29 11:26 webui.rb
</pre>


<p>Vemos las versiones de paquetería utilizadas actualmente.</p>

<pre>
root@chefpedro:/etc/chef# dpkg -l | grep chef
ii  chef                                10.18.2-2                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-expander                       10.18.2-1                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-server                         10.18.2-1                        A
meta-gem to install all server components of the Chef configuration management
system

ii  chef-server-api                     10.18.2-1                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-server-webui                   10.18.2-1                        A
systems integration framework, built to bring the benefits of configuration
management to your entire infrastructure.

ii  chef-solr                           10.18.2-1
Manages search indexes of Chef node attributes using SOLR
</pre>


<p>Ahora toca cacharrear con nuestro servidor ... al navegador: <a href="http://chefpedro:4040">http://chefpedro:4040</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openstack Installation - librarian and spiceweasel  Part I - Hosted Chef]]></title>
    <link href="http://pedrojimenez.github.com/blog/2013/01/28/openstack-installation-librarian-and-spiceweasel-part-i-hosted-chef/"/>
    <updated>2013-01-28T12:58:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2013/01/28/openstack-installation-librarian-and-spiceweasel-part-i-hosted-chef</id>
    <content type="html"><![CDATA[<center>
<img align=center
src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>




<h2>¿ Quiénes son ?</h2>


<p>Hemos de detenernos un instante para hacer meción especial a las 2 maravillosas
gemas que nos harán la vida muy sencilla con OpenStack. Hablamos de "librarian"
y de "spiceweasel". Para que la presentación sea bastante más oficial debemos
considerar que librarian será nuestro "cazador de cookbooks" y que spiceweasel
será el que los aplique contra el Servidor de Chef que elijamos, bien sea
público o privado. Además SpiceWeasel se encargará de aplicar roles/cookbooks a
los nodos directamente. Con esta pequeña "joya" se pueden hacer despliegues
verdaderamente veloces.</p>

<p><strong>Librarian</strong></p>

<p>Librarian-Chef is a bundler for infrastructure repositories using Chef. You can
use Librarian-Chef to resolve your infrastructure's cookbook dependencies,
fetch them, and install them into your infrastructure repository.</p>

<p>Enlace: <a href="https://github.com/applicationsonline/librarian">https://github.com/applicationsonline/librarian</a></p>

<p><strong>SpiceWeasel</strong></p>

<p>Provides a CLI tool for generating knife commands to build Chef-managed
infrastructure from a simple JSON or YAML file.</p>

<p>Enlace: <a href="http://wiki.opscode.com/display/chef/Spiceweasel">http://wiki.opscode.com/display/chef/Spiceweasel</a></p>

<!-- more -->




<h2>Instalación</h2>


<p>Así pues para poder automatizar tareas de instalación los utilizaremos a ambos.
En la mayoría de los casos, la diferentes empresas como la nuestra, querrán
poder realizar modificaciones a los "cookbooks" o al menos seleccionar la
fuente desde la que descargarlos/utilizarlos.</p>

<h3>Librarian</h3>


<p>Necesitamos instalarlo como gema:</p>

<pre>
gem install librarian
</pre>


<p>Ahora entra en acción Librarian-Chef y su combinación con la estructura del
chef-repo oficial de OpsCode. Como primer paso necesitamos descargar dicho
repositorio desde GiT.</p>

<pre>
git clone https://www.github.com/cloudbau/openstack-chef-repo.git
</pre>


<p>En su contenido podremos especificarle desde dónde queremos descargar los
cookbooks que se van a procesar dentro de nuestro "chef-repo".</p>

<pre>
PODEMOS VER COOKBOOKS DE LA COMUNIDAD:
site 'http://community.opscode.com/api/v1'
cookbook 'ntp', '1.2.0'
cookbook 'openssh', '1.1.0'
...

O ESPECIFICARLOS MANUALMENTE:
cookbook 'osops-utils',
  :git => 'https://github.com/cloudbau/chef-osops-utils.git'

cookbook 'rabbitmq-openstack',
  :git => 'https://github.com/mattray/rabbitmq-openstack.git'
</pre>


<p>Con la lista completa de los cookbooks que necesitamos para un despligue cloud,
"librarian" se encarga de descargarlos dentro de la estructura de nuestro repo.</p>

<pre>
operador@pedro-pruebas:~/openstack-chef-repo$ librarian-chef update
Installing apache2 (1.2.0)
Installing apt (1.5.0)
Installing aws (0.100.2)
Installing build-essential (1.1.2)
Installing openssl (1.0.0)
Installing mysql (1.3.0)
Installing postgresql (1.0.0)
Installing xfs (1.0.0)
Installing database (1.3.6)
Installing yum (1.0.0)
Installing erlang (1.1.0)
Installing ntp (1.2.0)
Installing openssh (1.1.0)
Installing rabbitmq (1.6.4)
Installing selinux (0.5.2)
Installing osops-utils (1.0.6)
Installing keystone (5.0.0)
Installing glance (5.0.0)
Installing horizon (5.0.0)
Installing sysctl (0.1.0)
Installing nova (5.0.0)
Installing mysql-openstack (1.0.4)
Installing rabbitmq-openstack (1.0.4)
</pre>




<h3>SpiceWeasel</h3>


<p>Se ha elegido en este primer post utiilzar el server hosted de Chef, aunque es
cierto que la próxima vez utilizaremos un chef-server propio. Para aquellos que
no tengan cuenta:
<a href="http://www.opscode.com/">http://www.opscode.com/</a></p>

<p>Una vez dentro hay que descargarse la clave privada del usuario elegido
(user.pem), y también la clave la organización (organizaction.pem) que se usarán para realizar la subida contra nuestro repo privado de Chef en OpsCode.</p>

<p>Hay que tener la gema instalada de nuevo:</p>

<pre>
gem install spiceweasel
</pre>


<p>Hay que modificar las opciones del servidor de Chef en el archivo "config.rb".
Con los valores correctos de usuario / organización y teniendo las claves en el
mismo directorio raiz del "chef-repo" procedemos a subirlos.</p>

<pre><code class='bash'>
pjimenez@pedro-pruebas:~/openstack-chef-repo$ spiceweasel infrastructure.yml | sh

Uploading ntp          [1.2.0]
Uploaded 1 cookbook.
Uploading openssh        [1.1.0]
Uploaded 1 cookbook.
Uploading apt            [1.5.0]
Uploaded 1 cookbook.
Uploading yum            [1.0.0]
Uploaded 1 cookbook.
Uploading build-essential [1.1.2]
Uploaded 1 cookbook.
Uploading erlang         [1.1.0]
Uploaded 1 cookbook.
Uploading rabbitmq       [1.6.4]
Uploaded 1 cookbook.
Uploading openssl        [1.0.0]
Uploaded 1 cookbook.
Uploading mysql          [1.3.0]
Uploaded 1 cookbook.
Uploading postgresql     [1.0.0]
Uploaded 1 cookbook.
Uploading aws            [0.100.2]
Uploaded 1 cookbook.
Uploading xfs            [1.0.0]
Uploaded 1 cookbook.
Uploading database       [1.3.6]
Uploaded 1 cookbook.
Uploading apache2        [1.2.0]
Uploaded 1 cookbook.
Uploading selinux        [0.5.2]
Uploaded 1 cookbook.
Uploading sysctl         [0.1.2]
Uploaded 1 cookbook.
Uploading osops-utils    [1.0.6]
Uploaded 1 cookbook.
Uploading mysql-openstack [1.0.4]
Uploaded 1 cookbook.
Uploading rabbitmq-openstack [1.0.4]
Uploaded 1 cookbook.
Uploading keystone       [5.0.0]
Uploaded 1 cookbook.
Uploading glance         [5.0.0]
Uploaded 1 cookbook.
Uploading nova           [5.0.0]
Uploaded 1 cookbook.
Uploading horizon        [5.0.0]
Uploaded 1 cookbook.
Updated Environment production
Updated Role base!
Updated Role mysql-master!
Updated Role rabbitmq-server!
Updated Role keystone!
Updated Role glance-api!
Updated Role glance-registry!
Updated Role glance!
Updated Role nova-setup!
Updated Role nova-scheduler!
Updated Role nova-api-ec2!
Updated Role nova-api-os-compute!
Updated Role nova-volume!
Updated Role nova-vncproxy!
Updated Role horizon-server!
Updated Role single-controller!
Updated Role single-compute!
Updated Role allinone!
</code></pre>


<p>Si visitamos ahora la parte de "CookBooks" desde nuestra cuenta podremos ver la
lista de todos ellos, accesibles ahora de manera pública en OpsCode Hosted
Chef.</p>

<blockquote><p>NOTA: nos queda pendiente aplicar además la parte de NODOS, aunque eso será
para el próximo post, cuando además se haga con un servidor de Chef propio.</p>

<p>NOTA2: Con la versión nueva de la gema de Spiceweasel hay una modficación, en el
archivo de "infrastructure.yml", en la parte de los Cookbooks hay un cambio en
la sintaxis:</p></blockquote>

<pre>
 ANTES:
 - ntp: #used by base role
  - 1.2.0

 DESPUÉS:
 - ntp: #used by base role
  version: 1.2.0
</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef: Bootstrapping for first time]]></title>
    <link href="http://pedrojimenez.github.com/blog/2012/12/11/chef-bootstrapping-for-first-time/"/>
    <updated>2012-12-11T15:36:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2012/12/11/chef-bootstrapping-for-first-time</id>
    <content type="html"><![CDATA[<center>
<img align=center src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>


<p>Hemos arrancado por fin nuestro laboratorio completamente con Chef y nos tocaba probar uno de los trucos/habilidades más asombrosas de Knife, BooTstrap.</p>

<p>Gracias a este comando podremos incluir a un nodo que no estuviera dado de alta en nuestra infraestructura desde alguno de los nodos de "administración", completando su registro e instalando el software de Chef en dicho nodo. Además crea el fichero de configuración "client.rb" y los dos ficheros de claves, el de cliente (client.pem) y el del servidor (validation.pem) en el nodo.</p>

<pre>
[ coruscant:~ ] knife bootstrap 192.168.1.242 -x operador -P onetimepassword --sudo
Bootstrapping Chef on 192.168.1.242
192.168.1.242 [Tue, 11 Dec 2012 15:14:48 +0100] INFO: *** Chef 10.14.4 ***
192.168.1.242 [Tue, 11 Dec 2012 15:14:49 +0100] INFO: Client key /etc/chef/client.pem is not present - registering
192.168.1.242 [Tue, 11 Dec 2012 15:14:49 +0100] INFO: HTTP Request Returned 404 Not Found: Cannot load node compute02
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Setting the run_list to [] from JSON
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Run List is []
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Run List expands to []
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Starting Chef Run for compute02
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Running start handlers
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Start handlers complete.
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Loading cookbooks []
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] WARN: Node compute02 has an empty run list.
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Chef Run complete in 0.632681 seconds
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Running report handlers
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Report handlers complete
</pre>




<!-- more -->


<p>A partir de este momento desde el propio Chef Server se introduce el nodo en el entorno deseado (Folsom en nuestro caso) y se le añaden los "Roles" que vaya a desempeñar.</p>

<blockquote><p>Se le podría pasar un archivo JSON (con la opción <strong>-j</strong>) para pasarle directamente el Entorno y los roles que se le van a aplicar. Dejo esta parte pendiente para un post posterior
que rellenaré un poco más adelante y cerrar así el círculo de la instalación distribuida con Chef/Knife.</p></blockquote>

<p>NOTA: Si existe el fichero de claves del cliente en la máquina destino , se generará un error</p>

<pre>
[ coruscant:~ ] knife bootstrap 192.168.1.242 -x operador -P operador --sudo
Bootstrapping Chef on 192.168.1.242
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] INFO: *** Chef 10.14.4 ***
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] INFO: HTTP Request Returned 401 Unauthorized: Failed to authenticate. Ensure that your client key is valid.
192.168.1.242 
192.168.1.242 ================================================================================
192.168.1.242 Chef encountered an error attempting to load the node data for "compute02"
192.168.1.242 ================================================================================
192.168.1.242 
192.168.1.242 Authentication Error:
192.168.1.242 ---------------------
192.168.1.242 Failed to authenticate to the chef server (http 401).
192.168.1.242 
192.168.1.242 Server Response:
192.168.1.242 ----------------
192.168.1.242 Failed to authenticate. Ensure that your client key is valid.
192.168.1.242 
192.168.1.242 Relevant Config Settings:
192.168.1.242 -------------------------
192.168.1.242 chef_server_url   "http://172.16.0.51:4000"
192.168.1.242 node_name         "compute02"
192.168.1.242 client_key        "/etc/chef/client.pem"
192.168.1.242 
192.168.1.242 If these settings are correct, your client_key may be invalid.
192.168.1.242 
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] FATAL: Net::HTTPServerException: 401 "Unauthorized"
</pre>


<p>Fuente: <a href="http://wiki.opscode.com/display/chef/Knife+Bootstrap">http://wiki.opscode.com/display/chef/Knife+Bootstrap</a>
Fuente Alternativa: <strong>@Sfrek</strong> y <strong>@achilued</strong> (gracias por toda vuestra ayuda y paciencia)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Access Error in Folsom]]></title>
    <link href="http://pedrojimenez.github.com/blog/2012/11/16/database-access-error-in-folsom/"/>
    <updated>2012-11-16T11:32:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2012/11/16/database-access-error-in-folsom</id>
    <content type="html"><![CDATA[<p>Después de darle muchas vueltas al asunto, el comodín que se utilizaba en Mysql 5.1 (versión usada Diablo and Essex) el conocido "%" ha comenzado a fallar. Nos encontramos con errores de acceso a las Bases de Datos que eran nuevos para mi hasta el momento. Revisando las bitácoras de instalaciones previas hemos visto que los permisos de acceso a las diferentes DataBases de Mysql han cambiado y se utiliza como única línea de permisos la siguiente:</p>

<pre>
mysql_database_user[keystone]: granting access with statement [GRANT all ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'onetimepassword']
</pre>


<p>Pero solamente con esta sentencia constatamos que el acceso desde otros nodos (multihost) nos daba error. Para solucionar estos problemas se ha probado a añadir sentencias extras de "GRANT" hasta que permitió dichas conexiones. Haciendo un resumen de todas ellas se ha modificado el cookbook de osops-utils para que añada una nueva sentencia de GRANT contra la dirección en la que se bindea el servicio de Mysql. De esta manera se podrá configurar el servicio de Base de Datos en HA y tener los accesos contra la "bind_address".</p>

<pre>
Archivo "osops-utils/libraries/database.rb"

        mysql_database_user username do
          connection connection_info
          password pw
          database_name db_name
          host "#{mysql_info["bind_address"]}"
          privileges [:all]
          action :grant
        end
</pre>


<p>Se ha hecho un <em>Pull Request</em> a la gente de <em>Rcbops</em> con esta modificación.<a href="https://github.com/rcbops-cookbooks/osops-utils/pull/46#issuecomment-10194833">Enlace</a>.</p>

<p>Ahora mismo lo estoy usando en nuestro Chef Server en el despligue de Folsom y funciona "like a charm". Nos genera dos sentencias de permisos para cada servicio (keystone/glance/nova/horizon).</p>

<pre>
INFO: Processing mysql_database_user[keystone] action grant (keystone::server line 24)
INFO: mysql_database_user[keystone]: granting access with statement [GRANT all ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'onetimepassword']
INFO: Processing mysql_database_user[keystone] action grant (keystone::server line 32)
INFO: mysql_database_user[keystone]: granting access with statement [GRANT all ON keystone.* TO 'keystone'@'172.16.172.4' IDENTIFIED BY 'onetimepassword']
</pre>

]]></content>
  </entry>
  
</feed>
