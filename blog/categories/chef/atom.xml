<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Pedro Jiménez's Blog]]></title>
  <link href="http://pedrojimenez.github.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://pedrojimenez.github.com/"/>
  <updated>2012-12-12T12:53:43+01:00</updated>
  <id>http://pedrojimenez.github.com/</id>
  <author>
    <name><![CDATA[Pedro Jiménez Solís]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chef: Bootstrapping for first time]]></title>
    <link href="http://pedrojimenez.github.com/blog/2012/12/11/chef-bootstrapping-for-first-time/"/>
    <updated>2012-12-11T15:36:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2012/12/11/chef-bootstrapping-for-first-time</id>
    <content type="html"><![CDATA[<center>
<img align=center src="http://docs.opscode.com/_static/opscode_chef_html_logo.jpg">
</center>


<p>Hemos arrancado por fin nuestro laboratorio completamente con Chef y nos tocaba probar uno de los trucos/habilidades más asombrosas de Knife, BooTstrap.</p>

<p>Gracias a este comando podremos incluir a un nodo que no estuviera dado de alta en nuestra infraestructura desde alguno de los nodos de "administración", completando su registro e instalando el software de Chef en dicho nodo. Además crea el fichero de configuración "client.rb" y los dos ficheros de claves, el de cliente (client.pem) y el del servidor (validation.pem) en el nodo.</p>

<pre>
[ coruscant:~ ] knife bootstrap 192.168.1.242 -x operador -P onetimepassword --sudo
Bootstrapping Chef on 192.168.1.242
192.168.1.242 [Tue, 11 Dec 2012 15:14:48 +0100] INFO: *** Chef 10.14.4 ***
192.168.1.242 [Tue, 11 Dec 2012 15:14:49 +0100] INFO: Client key /etc/chef/client.pem is not present - registering
192.168.1.242 [Tue, 11 Dec 2012 15:14:49 +0100] INFO: HTTP Request Returned 404 Not Found: Cannot load node compute02
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Setting the run_list to [] from JSON
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Run List is []
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Run List expands to []
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Starting Chef Run for compute02
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Running start handlers
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Start handlers complete.
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Loading cookbooks []
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] WARN: Node compute02 has an empty run list.
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Chef Run complete in 0.632681 seconds
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Running report handlers
192.168.1.242 [Tue, 11 Dec 2012 15:14:50 +0100] INFO: Report handlers complete
</pre>




<!-- more -->


<p>A partir de este momento desde el propio Chef Server se introduce el nodo en el entorno deseado (Folsom en nuestro caso) y se le añaden los "Roles" que vaya a desempeñar.</p>

<blockquote><p>Se le podría pasar un archivo JSON (con la opción <strong>-j</strong>) para pasarle directamente el Entorno y los roles que se le van a aplicar. Dejo esta parte pendiente para un post posterior
que rellenaré un poco más adelante y cerrar así el círculo de la instalación distribuida con Chef/Knife.</p></blockquote>

<p>NOTA: Si existe el fichero de claves del cliente en la máquina destino , se generará un error</p>

<pre>
[ coruscant:~ ] knife bootstrap 192.168.1.242 -x operador -P operador --sudo
Bootstrapping Chef on 192.168.1.242
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] INFO: *** Chef 10.14.4 ***
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] INFO: HTTP Request Returned 401 Unauthorized: Failed to authenticate. Ensure that your client key is valid.
192.168.1.242 
192.168.1.242 ================================================================================
192.168.1.242 Chef encountered an error attempting to load the node data for "compute02"
192.168.1.242 ================================================================================
192.168.1.242 
192.168.1.242 Authentication Error:
192.168.1.242 ---------------------
192.168.1.242 Failed to authenticate to the chef server (http 401).
192.168.1.242 
192.168.1.242 Server Response:
192.168.1.242 ----------------
192.168.1.242 Failed to authenticate. Ensure that your client key is valid.
192.168.1.242 
192.168.1.242 Relevant Config Settings:
192.168.1.242 -------------------------
192.168.1.242 chef_server_url   "http://172.16.0.51:4000"
192.168.1.242 node_name         "compute02"
192.168.1.242 client_key        "/etc/chef/client.pem"
192.168.1.242 
192.168.1.242 If these settings are correct, your client_key may be invalid.
192.168.1.242 
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
192.168.1.242 [Tue, 11 Dec 2012 15:07:23 +0100] FATAL: Net::HTTPServerException: 401 "Unauthorized"
</pre>


<p>Fuente: <a href="http://wiki.opscode.com/display/chef/Knife+Bootstrap">http://wiki.opscode.com/display/chef/Knife+Bootstrap</a>
Fuente Alternativa: <strong>@Sfrek</strong> y <strong>@achilued</strong> (gracias por toda vuestra ayuda y paciencia)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Access Error in Folsom]]></title>
    <link href="http://pedrojimenez.github.com/blog/2012/11/16/database-access-error-in-folsom/"/>
    <updated>2012-11-16T11:32:00+01:00</updated>
    <id>http://pedrojimenez.github.com/blog/2012/11/16/database-access-error-in-folsom</id>
    <content type="html"><![CDATA[<p>Después de darle muchas vueltas al asunto, el comodín que se utilizaba en Mysql 5.1 (versión usada Diablo and Essex) el conocido "%" ha comenzado a fallar. Nos encontramos con errores de acceso a las Bases de Datos que eran nuevos para mi hasta el momento. Revisando las bitácoras de instalaciones previas hemos visto que los permisos de acceso a las diferentes DataBases de Mysql han cambiado y se utiliza como única línea de permisos la siguiente:</p>

<pre>
mysql_database_user[keystone]: granting access with statement [GRANT all ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'onetimepassword']
</pre>


<p>Pero solamente con esta sentencia constatamos que el acceso desde otros nodos (multihost) nos daba error. Para solucionar estos problemas se ha probado a añadir sentencias extras de "GRANT" hasta que permitió dichas conexiones. Haciendo un resumen de todas ellas se ha modificado el cookbook de osops-utils para que añada una nueva sentencia de GRANT contra la dirección en la que se bindea el servicio de Mysql. De esta manera se podrá configurar el servicio de Base de Datos en HA y tener los accesos contra la "bind_address".</p>

<pre>
Archivo "osops-utils/libraries/database.rb"

        mysql_database_user username do
          connection connection_info
          password pw
          database_name db_name
          host "#{mysql_info["bind_address"]}"
          privileges [:all]
          action :grant
        end
</pre>


<p>Se ha hecho un <em>Pull Request</em> a la gente de <em>Rcbops</em> con esta modificación.<a href="https://github.com/rcbops-cookbooks/osops-utils/pull/46#issuecomment-10194833">Enlace</a>.</p>

<p>Ahora mismo lo estoy usando en nuestro Chef Server en el despligue de Folsom y funciona "like a charm". Nos genera dos sentencias de permisos para cada servicio (keystone/glance/nova/horizon).</p>

<pre>
INFO: Processing mysql_database_user[keystone] action grant (keystone::server line 24)
INFO: mysql_database_user[keystone]: granting access with statement [GRANT all ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'onetimepassword']
INFO: Processing mysql_database_user[keystone] action grant (keystone::server line 32)
INFO: mysql_database_user[keystone]: granting access with statement [GRANT all ON keystone.* TO 'keystone'@'172.16.172.4' IDENTIFIED BY 'onetimepassword']
</pre>

]]></content>
  </entry>
  
</feed>
